import{C as q}from"./CreatePolygon-DXVtJxrI.js";import{f as P,d as I,g as T,l as Z,e as ie,h as ne,i as oe,j as V,k as N,m as ae,n as G,o as se,q as L,r as X,p as D,a as H}from"./CesiumEarth-DSJv-lZu.js";import{l as B,m as le,_ as ce,c as ue,a as M,b as R,w as S,F as he,r as pe,o as fe,d as F}from"./index-Do2SFHFE.js";import{r as de}from"./rbush.min-DqSz9WxD.js";import{E as ve}from"./index-hnr1oFTy.js";function U(i){if(!i)throw new Error("geojson is required");var t=[];return P(i,function(e){me(e,t)}),I(t)}function me(i,t){var e=[],r=i.geometry;if(r!==null){switch(r.type){case"Polygon":e=T(r);break;case"LineString":e=[T(r)]}e.forEach(function(n){var o=ge(n,i.properties);o.forEach(function(a){a.id=t.length,t.push(a)})})}}function ge(i,t){var e=[];return i.reduce(function(r,n){var o=Z([r,n],t);return o.bbox=ye(r,n),e.push(o),n}),e}function ye(i,t){var e=i[0],r=i[1],n=t[0],o=t[1],a=e<n?e:n,l=r<o?r:o,s=e>n?e:n,c=r>o?r:o;return[a,l,s,c]}var W={exports:{}};const Ce=B(ie),we=B(ne),be=B(oe);var x=de,j=Ce,ee=we,E=be.default,xe=ee.featureEach;ee.coordEach;j.polygon;var J=j.featureCollection;function te(i){var t=new x(i);return t.insert=function(e){if(e.type!=="Feature")throw new Error("invalid feature");return e.bbox=e.bbox?e.bbox:E(e),x.prototype.insert.call(this,e)},t.load=function(e){var r=[];return Array.isArray(e)?e.forEach(function(n){if(n.type!=="Feature")throw new Error("invalid features");n.bbox=n.bbox?n.bbox:E(n),r.push(n)}):xe(e,function(n){if(n.type!=="Feature")throw new Error("invalid features");n.bbox=n.bbox?n.bbox:E(n),r.push(n)}),x.prototype.load.call(this,r)},t.remove=function(e,r){if(e.type!=="Feature")throw new Error("invalid feature");return e.bbox=e.bbox?e.bbox:E(e),x.prototype.remove.call(this,e,r)},t.clear=function(){return x.prototype.clear.call(this)},t.search=function(e){var r=x.prototype.search.call(this,this.toBBox(e));return J(r)},t.collides=function(e){return x.prototype.collides.call(this,this.toBBox(e))},t.all=function(){var e=x.prototype.all.call(this);return J(e)},t.toJSON=function(){return x.prototype.toJSON.call(this)},t.fromJSON=function(e){return x.prototype.fromJSON.call(this,e)},t.toBBox=function(e){var r;if(e.bbox)r=e.bbox;else if(Array.isArray(e)&&e.length===4)r=e;else if(Array.isArray(e)&&e.length===6)r=[e[0],e[1],e[3],e[4]];else if(e.type==="Feature")r=E(e);else if(e.type==="FeatureCollection")r=E(e);else throw new Error("invalid geojson");return{minX:r[0],minY:r[1],maxX:r[2],maxY:r[3]}},t}W.exports=te;W.exports.default=te;var Ee=W.exports;const Ae=le(Ee);function $(i,t){var e={},r=[];if(i.type==="LineString"&&(i=V(i)),t.type==="LineString"&&(t=V(t)),i.type==="Feature"&&t.type==="Feature"&&i.geometry!==null&&t.geometry!==null&&i.geometry.type==="LineString"&&t.geometry.type==="LineString"&&i.geometry.coordinates.length===2&&t.geometry.coordinates.length===2){var n=Y(i,t);return n&&r.push(n),I(r)}var o=Ae();return o.load(U(t)),N(U(i),function(a){N(o.search(a),function(l){var s=Y(a,l);if(s){var c=T(s).join(",");e[c]||(e[c]=!0,r.push(s))}})}),I(r)}function Y(i,t){var e=T(i),r=T(t);if(e.length!==2)throw new Error("<intersects> line1 must only contain 2 coordinates");if(r.length!==2)throw new Error("<intersects> line2 must only contain 2 coordinates");var n=e[0][0],o=e[0][1],a=e[1][0],l=e[1][1],s=r[0][0],c=r[0][1],u=r[1][0],p=r[1][1],h=(p-c)*(a-n)-(u-s)*(l-o),f=(u-s)*(o-c)-(p-c)*(n-s),v=(a-n)*(o-c)-(l-o)*(n-s);if(h===0)return null;var d=f/h,g=v/h;if(d>=0&&d<=1&&g>=0&&g<=1){var y=n+d*(a-n),m=o+d*(l-o);return ae([y,m])}return null}function k(i,t){t===void 0&&(t={});var e=G(i);switch(!t.properties&&i.type==="Feature"&&(t.properties=i.properties),e.type){case"Polygon":return Pe(e,t);case"MultiPolygon":return Ie(e,t);default:throw new Error("invalid poly")}}function Pe(i,t){t===void 0&&(t={});var e=G(i),r=e.coordinates,n=t.properties?t.properties:i.type==="Feature"?i.properties:{};return re(r,n)}function Ie(i,t){t===void 0&&(t={});var e=G(i),r=e.coordinates,n=t.properties?t.properties:i.type==="Feature"?i.properties:{},o=[];return r.forEach(function(a){o.push(re(a,n))}),I(o)}function re(i,t){return i.length>1?se(i,t):Z(i[0],t)}function Te(i,t){var e=!0;return P(i,function(r){P(t,function(n){if(e===!1)return!1;e=Le(r.geometry,n.geometry)})}),e}function Le(i,t){switch(i.type){case"Point":switch(t.type){case"Point":return!Fe(i.coordinates,t.coordinates);case"LineString":return!z(t,i);case"Polygon":return!L(i,t)}break;case"LineString":switch(t.type){case"Point":return!z(i,t);case"LineString":return!Me(i,t);case"Polygon":return!K(t,i)}break;case"Polygon":switch(t.type){case"Point":return!L(t,i);case"LineString":return!K(i,t);case"Polygon":return!_e(t,i)}}return!1}function z(i,t){for(var e=0;e<i.coordinates.length-1;e++)if(Se(i.coordinates[e],i.coordinates[e+1],t.coordinates))return!0;return!1}function Me(i,t){var e=$(i,t);return e.features.length>0}function K(i,t){for(var e=0,r=t.coordinates;e<r.length;e++){var n=r[e];if(L(n,i))return!0}var o=$(t,k(i));return o.features.length>0}function _e(i,t){for(var e=0,r=i.coordinates[0];e<r.length;e++){var n=r[e];if(L(n,t))return!0}for(var o=0,a=t.coordinates[0];o<a.length;o++){var l=a[o];if(L(l,i))return!0}var s=$(k(i),k(t));return s.features.length>0}function Se(i,t,e){var r=e[0]-i[0],n=e[1]-i[1],o=t[0]-i[0],a=t[1]-i[1],l=r*a-n*o;return l!==0?!1:Math.abs(o)>=Math.abs(a)?o>0?i[0]<=e[0]&&e[0]<=t[0]:t[0]<=e[0]&&e[0]<=i[0]:a>0?i[1]<=e[1]&&e[1]<=t[1]:t[1]<=e[1]&&e[1]<=i[1]}function Fe(i,t){return i[0]===t[0]&&i[1]===t[1]}function Oe(i,t){var e=!1;return P(i,function(r){P(t,function(n){if(e===!0)return!0;e=!Te(r.geometry,n.geometry)})}),e}function De(i,t,e,r){r===void 0&&(r={});for(var n=[],o=i[0],a=i[1],l=i[2],s=i[3],c=t/X([o,a],[l,a],r),u=c*(l-o),p=e/X([o,a],[o,s],r),h=p*(s-a),f=l-o,v=s-a,d=Math.floor(f/u),g=Math.floor(v/h),y=(f-d*u)/2,m=(v-g*h)/2,b=o+y,C=0;C<d;C++){for(var w=a+m,A=0;A<g;A++){var _=D([[[b,w],[b,w+h],[b+u,w+h],[b+u,w],[b,w]]],r.properties);r.mask?Oe(r.mask,_)&&n.push(_):n.push(_),w+=h}b+=u}return I(n)}function Q(i,t,e){return e===void 0&&(e={}),De(i,t,t,e)}class O{constructor(t){if(!t)throw new Error("no viewer object!");this.viewer=t,this.result=[],this.handler=void 0,this.toolTip="",this.heading=""}IsometricAnalysis(t){t=t||.1;let e=t*200>35?35:t*200;this.arrowWidth=e<15?15:e;const r=this,n=this.viewer;q(n,[],{color:Cesium.Color.RED.withAlpha(.1),outlineColor:Cesium.Color.YELLOW,outlineWidth:2},function(o){let a=r.Cartesian3ListToWGS84(o.pottingPoint);n.entities.remove(o);let l=[],s=1e4,c=1e4,u=-1e4,p=-1e3;for(let d=0;d<a.length;d++){const g=a[d],y=g.lng,m=g.lat;l.push([y,m]),s=y<s?y:s,c=m<c?m:c,u=y>u?y:u,p=m>p?m:p}l.push(l[0]);let h=[s,c,u,p],f=D([l]),v=Q(h,t,{mask:f});r.createEllipse(v)})}EqualDivisionAnalysis(t){const e=this,r=this.viewer;q(r,[],{color:Cesium.Color.RED.withAlpha(.1),outlineColor:Cesium.Color.YELLOW,outlineWidth:2},function(n){let o=e.Cartesian3ListToWGS84(n.pottingPoint);r.entities.remove(n);let a=[],l=1e4,s=1e4,c=-1e4,u=-1e3;for(let m=0;m<o.length;m++){const b=o[m],C=b.lng,w=b.lat;a.push([C,w]),l=C<l?C:l,s=w<s?w:s,c=C>c?C:c,u=w>u?w:u}a.push(a[0]);let p=[l,s,c,u],h=c-l,f=u-s;f=f>h?f:h;const v=f/t;let d=v*2e3>35?35:v*2e3;e.arrowWidth=d<15?15:d;let g=D([a]),y=Q(p,v,{units:"degrees",mask:g});e.createEllipse(y)})}createEllipse(t){let e=[];for(let r=0;r<t.features.length;r++){const o=t.features[r].geometry.coordinates[0],a=[(o[0][0]+o[2][0])/2,(o[0][1]+o[2][1])/2];let l=Cesium.Cartographic.fromDegrees(a[0],a[1]);e.push(l);for(let s=0;s<o.length;s++){const c=o[s];let u=Cesium.Cartographic.fromDegrees(c[0],c[1]);e.push(u);const p=o[s+1];if(p){let h=[(c[0]+p[0])/2,(c[1]+p[1])/2],f=Cesium.Cartographic.fromDegrees(h[0],h[1]);e.push(f)}}}Cesium.sampleTerrainMostDetailed(this.viewer.scene.terrainProvider,e).then(r=>{let n=[],o=r.reduce(function(a,l,s,c){var u=s*10,p=u+10,h=c.slice(u,p);return h.length!=0&&(n[s]=h),n},[]);this.calculateSlope(o)})}createPolygonInsrance(t,e){let r=[];for(let a=1;a<t.length-1;a++){const l=t[a];r.push(Cesium.Cartographic.toCartesian(l))}let n=new Cesium.PolygonGeometry({polygonHierarchy:new Cesium.PolygonHierarchy(r)});return new Cesium.GeometryInstance({geometry:n,attributes:{color:Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.fromCssColorString(e)),show:new Cesium.ShowGeometryInstanceAttribute(!0)}})}createArrowInstance(t,e,r,n,o){let a=new Cesium.Cartographic((t.longitude+e.longitude)/2,(t.latitude+e.latitude)/2,(t.height+e.height)/2),l=new Cesium.Cartographic((r.longitude+e.longitude)/2,(r.latitude+e.latitude)/2,(r.height+e.height)/2),s=n>0?[Cesium.Cartographic.toCartesian(a),Cesium.Cartographic.toCartesian(l)]:[Cesium.Cartographic.toCartesian(l),Cesium.Cartographic.toCartesian(a)],c=Cesium.Transforms.eastNorthUpToFixedFrame(s[0]),u=Cesium.Matrix4.inverse(c,new Cesium.Matrix4),p=Cesium.Cartesian3.subtract(s[1],s[0],new Cesium.Cartesian3),h=Cesium.Matrix4.multiplyByPointAsVector(u,p,new Cesium.Cartesian3),f=Cesium.Cartesian3.normalize(h,new Cesium.Cartesian3),v=Math.atan2(f.y,f.x),d=Cesium.Math.toDegrees(v);return new Cesium.GeometryInstance({id:{type:"SlopeAspect",value:o,heading:d},geometry:new Cesium.GroundPolylineGeometry({positions:s,width:this.arrowWidth})})}calculateSlope(t){let e=[],r=[];for(let a=0;a<t.length;a++){const l=t[a],s=l[0];let c=0,u=0;for(let C=1;C<l.length-1;C++){let A=l[C].height-s.height;Math.abs(A)>c&&(c=A,u=C)}let p=new Cesium.Cartographic(s.longitude,s.latitude,0),h=new Cesium.Cartographic(l[u].longitude,l[u].latitude,0),f=Cesium.Cartesian3.distance(Cesium.Cartographic.toCartesian(p),Cesium.Cartographic.toCartesian(h)),v=Math.abs(c/f),d=this.calculateSlopeColor(v,.4);const g=this.createPolygonInsrance(l,d);r.push(g);let y=u>4?l[u-4]:l[u+4],m=l[u];const b=this.createArrowInstance(m,s,y,c,v);e.push(b)}const n=this.viewer.scene.primitives.add(new Cesium.GroundPrimitive({geometryInstances:r,appearance:new Cesium.PerInstanceColorAppearance({translucent:!0,closed:!1})})),o=this.viewer.scene.primitives.add(new Cesium.GroundPolylinePrimitive({geometryInstances:e,appearance:new Cesium.PolylineMaterialAppearance({material:new Cesium.Material({fabric:{type:"PolylineArrow",uniforms:{color:new Cesium.Color(3,2,0,.7)}}})})}));this.result.push(o,n)}clearAll(){this.result.forEach(t=>{this.viewer.scene.primitives.remove(t)}),this.result=[]}calculateSlopeColor(t,e){return t<.00872686779075879?"rgba(85,182,43,"+e+")":t<.03492076949174773?"rgba(135,211,43,"+e+")":t<.08748866352592401?"rgba(204,244,44,"+e+")":t<.2679491924311227?"rgba(245,233,44,"+e+")":t<.7002075382097097?"rgba(255,138,43,"+e+")":t<1.4281480067421144?"rgba(255,84,43,"+e+")":"rgba(255,32,43,"+e+")"}MOUSE_MOVE_TIP(){const t=this,e=this.viewer;this.handler=new Cesium.ScreenSpaceEventHandler(e.canvas),this.handler.setInputAction(function(r){let n=r.endPosition;var o=e.scene.pick(n);if(o&&o.id&&o.id.type==="SlopeAspect"){t.toolTip=o.id.value.toFixed(2),t.heading=o.id.heading.toFixed(2);let a="斜率："+t.toolTip*100+"%<br />角度："+t.heading+"°";H(a,n,!0)}else t.toolTip="",t.heading="",H(t.toolTip,n,!1)},Cesium.ScreenSpaceEventType.MOUSE_MOVE)}closeTip(){this.handler&&(this.handler.destroy(),this.handler=void 0)}Cartesian3ListToWGS84(t){let e=Cesium.Ellipsoid.WGS84,r=[];for(let n=0;n<t.length;n++){const o=t[n];let a=e.cartesianToCartographic(o);r.push({lng:Cesium.Math.toDegrees(a.longitude),lat:Cesium.Math.toDegrees(a.latitude),alt:a.height})}return r}}const ke={class:"toolPane"},Ge={style:{"text-align":"center"}},Be={__name:"index",setup(i){function t(){viewer.scene.globe.depthTestAgainstTerrain=!0;let n=new O(viewer);n.MOUSE_MOVE_TIP(),n.EqualDivisionAnalysis(20)}function e(){viewer.scene.globe.depthTestAgainstTerrain=!0;let n=new O(viewer);n.MOUSE_MOVE_TIP(),n.IsometricAnalysis(.05)}function r(){new O(viewer).clearAll()}return(n,o)=>{const a=pe("el-button");return fe(),ue(he,null,[M(ve),R("div",ke,[R("div",Ge,[M(a,{type:"primary",onClick:t},{default:S(()=>[F("等分处理")]),_:1}),M(a,{type:"primary",onClick:e},{default:S(()=>[F("等距处理")]),_:1}),M(a,{type:"warning",onClick:r},{default:S(()=>[F("清除")]),_:1})])])],64)}}},Xe=ce(Be,[["__scopeId","data-v-d5305459"]]);export{Xe as default};
